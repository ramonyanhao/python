def primtme(str):
    return str
print(primtme (1234))#如果函数加（）返回函数运算结果
print(primtme)#如果在调用函数时不加（）相当于返回函数所在的内存地址
#小括号放在调用函数后面，这个函数就会执行；然而如果你不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它
#可更改类型 的属性进行操作，这只是对引用的内存块里面的值进行操作，引用并没变，自然所有引用它的对象的值都变了。
#而对不可更改的对象进行操作，因为它引用的内存块只是对应一个固定的值，不能进行修改，要重新复制实际上就是更新引用
def changeme(mylist):
    "修改传入的列表"
    mylist=[1, 2, 3, 4]#这里mylist列表赋值1,2,3,4，如果函数里mylist列表使用mylist.append结果就不一样了，函数里和函数外的mylist列表引用同一个内存地址
    print("函数内取值: ", mylist)#局部作用域
    return
# 调用changeme函数
mylist = [10, 20, 30]#在这里mylist列表赋值10,20,30，全局作用域
changeme(mylist)#引用函数changeme，如果函数里是append，那这里的结果是[10, 20, 30, [1, 2, 3, 4]]
print("函数外取值: ", mylist)#这里打印的结果还是函数外的mylist列表10，20，30

a=[1,2,3]#可变对象列表，字典
print(id(a))
a.append([4,5,6])
print(id(a))#这里可以看出列表a的内存地址是一样的，他们引用的是同一个变量

a=1#不可变对象整数、字符串、元组
print(id(a))
a='abc'
print(id(a))#这里的内存地址不一样，他们用的变量相同但是引用的不是同一个地址
#在函数式语言中，当内嵌函数体内引用到体外的变量时，将会把定义时涉及到的引用环境和函数体打包成一个整体（闭包）返回。
#在Python中创建一个闭包可以归结为以下三点：
#函数内嵌函数；
#内嵌函数需要引用上一级namespace中的变量；
#外围函数必须返回内嵌函数；